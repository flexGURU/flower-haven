// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name, description, image_url)
VALUES ($1, $2, $3)
RETURNING id, name, description, image_url, product_count, deleted_at, created_at
`

type CreateCategoryParams struct {
	Name        string   `json:"name"`
	Description string   `json:"description"`
	ImageUrl    []string `json:"image_url"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Name, arg.Description, arg.ImageUrl)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.ProductCount,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
UPDATE categories
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategoriesWithProductCount = `-- name: GetCategoriesWithProductCount :many
SELECT 
    c.id, c.name, c.description, c.image_url, c.product_count, c.deleted_at, c.created_at, 
    COUNT(p.id) AS products_count
FROM categories c
LEFT JOIN products p 
    ON p.category_id = c.id 
   AND p.deleted_at IS NULL  
WHERE c.deleted_at IS NULL
GROUP BY c.id
`

type GetCategoriesWithProductCountRow struct {
	ID            int64              `json:"id"`
	Name          string             `json:"name"`
	Description   string             `json:"description"`
	ImageUrl      []string           `json:"image_url"`
	ProductCount  int64              `json:"product_count"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	CreatedAt     time.Time          `json:"created_at"`
	ProductsCount int64              `json:"products_count"`
}

func (q *Queries) GetCategoriesWithProductCount(ctx context.Context) ([]GetCategoriesWithProductCountRow, error) {
	rows, err := q.db.Query(ctx, getCategoriesWithProductCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCategoriesWithProductCountRow{}
	for rows.Next() {
		var i GetCategoriesWithProductCountRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.ProductCount,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.ProductsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name, description, image_url, product_count, deleted_at, created_at FROM categories WHERE id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.ProductCount,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, description, image_url, product_count, deleted_at, created_at FROM categories
WHERE 
    deleted_at IS NULL
    AND (
        COALESCE($1, '') = '' 
        OR LOWER(name) LIKE $1
        OR LOWER(description) LIKE $1
    )
ORDER BY created_at DESC
LIMIT $3 OFFSET $2
`

type ListCategoriesParams struct {
	Search interface{} `json:"search"`
	Offset int32       `json:"offset"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories, arg.Search, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.ProductCount,
			&i.DeletedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoriesCount = `-- name: ListCategoriesCount :one
SELECT COUNT(*) AS total_categories
FROM categories
WHERE 
    deleted_at IS NULL
    AND (
        COALESCE($1, '') = '' 
        OR LOWER(name) LIKE $1
        OR LOWER(description) LIKE $1
    )
`

func (q *Queries) ListCategoriesCount(ctx context.Context, search interface{}) (int64, error) {
	row := q.db.QueryRow(ctx, listCategoriesCount, search)
	var total_categories int64
	err := row.Scan(&total_categories)
	return total_categories, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET name = coalesce($1, name),
    description = coalesce($2, description),
    image_url = coalesce($3, image_url)
WHERE id = $4
RETURNING id, name, description, image_url, product_count, deleted_at, created_at
`

type UpdateCategoryParams struct {
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	ImageUrl    []string    `json:"image_url"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.ProductCount,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}
