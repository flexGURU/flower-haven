// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_stems.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProductStem = `-- name: CreateProductStem :one
INSERT INTO product_stems (product_id, stem_count, price)
VALUES ($1, $2, $3)
RETURNING id, product_id, stem_count, price
`

type CreateProductStemParams struct {
	ProductID int64          `json:"product_id"`
	StemCount int64          `json:"stem_count"`
	Price     pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateProductStem(ctx context.Context, arg CreateProductStemParams) (ProductStem, error) {
	row := q.db.QueryRow(ctx, createProductStem, arg.ProductID, arg.StemCount, arg.Price)
	var i ProductStem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.StemCount,
		&i.Price,
	)
	return i, err
}

const deleteProductStemsByProductID = `-- name: DeleteProductStemsByProductID :exec
DELETE FROM product_stems
WHERE product_id = $1
`

func (q *Queries) DeleteProductStemsByProductID(ctx context.Context, productID int64) error {
	_, err := q.db.Exec(ctx, deleteProductStemsByProductID, productID)
	return err
}

const getProductStemByID = `-- name: GetProductStemByID :one
SELECT id, product_id, stem_count, price FROM product_stems
WHERE id = $1
`

func (q *Queries) GetProductStemByID(ctx context.Context, id int64) (ProductStem, error) {
	row := q.db.QueryRow(ctx, getProductStemByID, id)
	var i ProductStem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.StemCount,
		&i.Price,
	)
	return i, err
}

const getProductStemsByProductID = `-- name: GetProductStemsByProductID :many
SELECT id, product_id, stem_count, price FROM product_stems
WHERE product_id = $1
`

func (q *Queries) GetProductStemsByProductID(ctx context.Context, productID int64) ([]ProductStem, error) {
	rows, err := q.db.Query(ctx, getProductStemsByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductStem{}
	for rows.Next() {
		var i ProductStem
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.StemCount,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductStem = `-- name: UpdateProductStem :one
UPDATE product_stems
SET stem_count = coalesce($1, stem_count),
    price = coalesce($2, price)
WHERE id = $3
RETURNING id, product_id, stem_count, price
`

type UpdateProductStemParams struct {
	StemCount pgtype.Int8    `json:"stem_count"`
	Price     pgtype.Numeric `json:"price"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateProductStem(ctx context.Context, arg UpdateProductStemParams) (ProductStem, error) {
	row := q.db.QueryRow(ctx, updateProductStem, arg.StemCount, arg.Price, arg.ID)
	var i ProductStem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.StemCount,
		&i.Price,
	)
	return i, err
}
