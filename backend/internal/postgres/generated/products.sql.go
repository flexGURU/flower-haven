// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price, category_id, has_stems, is_message_card, is_add_on, is_flowers, image_url, stock_quantity)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, name, description, price, category_id, image_url, stock_quantity, deleted_at, created_at, has_stems, is_message_card, is_flowers, is_add_on
`

type CreateProductParams struct {
	Name          string         `json:"name"`
	Description   string         `json:"description"`
	Price         pgtype.Numeric `json:"price"`
	CategoryID    int64          `json:"category_id"`
	HasStems      bool           `json:"has_stems"`
	IsMessageCard bool           `json:"is_message_card"`
	IsAddOn       bool           `json:"is_add_on"`
	IsFlowers     bool           `json:"is_flowers"`
	ImageUrl      []string       `json:"image_url"`
	StockQuantity int64          `json:"stock_quantity"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.CategoryID,
		arg.HasStems,
		arg.IsMessageCard,
		arg.IsAddOn,
		arg.IsFlowers,
		arg.ImageUrl,
		arg.StockQuantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CategoryID,
		&i.ImageUrl,
		&i.StockQuantity,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.HasStems,
		&i.IsMessageCard,
		&i.IsFlowers,
		&i.IsAddOn,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT p.id, p.name, p.description, p.price, p.category_id, p.image_url, p.stock_quantity, p.deleted_at, p.created_at, p.has_stems, p.is_message_card, p.is_flowers, p.is_add_on, 
       c.id AS category_id,
       c.name AS category_name, 
       c.description AS category_description
FROM products p
LEFT JOIN categories c ON p.category_id = c.id
WHERE p.id = $1
GROUP BY p.id, c.id, c.name, c.description
`

type GetProductByIDRow struct {
	ID                  int64              `json:"id"`
	Name                string             `json:"name"`
	Description         string             `json:"description"`
	Price               pgtype.Numeric     `json:"price"`
	CategoryID          int64              `json:"category_id"`
	ImageUrl            []string           `json:"image_url"`
	StockQuantity       int64              `json:"stock_quantity"`
	DeletedAt           pgtype.Timestamptz `json:"deleted_at"`
	CreatedAt           time.Time          `json:"created_at"`
	HasStems            bool               `json:"has_stems"`
	IsMessageCard       bool               `json:"is_message_card"`
	IsFlowers           bool               `json:"is_flowers"`
	IsAddOn             bool               `json:"is_add_on"`
	CategoryID_2        pgtype.Int8        `json:"category_id_2"`
	CategoryName        pgtype.Text        `json:"category_name"`
	CategoryDescription pgtype.Text        `json:"category_description"`
}

func (q *Queries) GetProductByID(ctx context.Context, id int64) (GetProductByIDRow, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i GetProductByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CategoryID,
		&i.ImageUrl,
		&i.StockQuantity,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.HasStems,
		&i.IsMessageCard,
		&i.IsFlowers,
		&i.IsAddOn,
		&i.CategoryID_2,
		&i.CategoryName,
		&i.CategoryDescription,
	)
	return i, err
}

const listCountProducts = `-- name: ListCountProducts :one
SELECT COUNT(DISTINCT p.id) AS total_products
FROM products p
WHERE 
    p.deleted_at IS NULL
    AND (
        COALESCE($1, '') = '' 
        OR LOWER(p.name) LIKE $1
        OR LOWER(p.description) LIKE $1
    )
    AND (
        $2::float IS NULL 
        OR p.price >= $2
    )
    AND (
        $3::float IS NULL 
        OR p.price <= $3
    )
    AND (
        $4::int[] IS NULL 
        OR p.category_id = ANY($4::int[])
    )
`

type ListCountProductsParams struct {
	Search      interface{}   `json:"search"`
	PriceFrom   pgtype.Float8 `json:"price_from"`
	PriceTo     pgtype.Float8 `json:"price_to"`
	CategoryIds []int32       `json:"category_ids"`
}

func (q *Queries) ListCountProducts(ctx context.Context, arg ListCountProductsParams) (int64, error) {
	row := q.db.QueryRow(ctx, listCountProducts,
		arg.Search,
		arg.PriceFrom,
		arg.PriceTo,
		arg.CategoryIds,
	)
	var total_products int64
	err := row.Scan(&total_products)
	return total_products, err
}

const listProducts = `-- name: ListProducts :many


SELECT 
    p.id, p.name, p.description, p.price, p.category_id, p.image_url, p.stock_quantity, p.deleted_at, p.created_at, p.has_stems, p.is_message_card, p.is_flowers, p.is_add_on,
    c.id AS category_id,
    c.name AS category_name, 
    c.description AS category_description,
    COALESCE(
        json_agg(
            jsonb_build_object(
                'id', ps.id,
                'product_id', ps.product_id,
                'stem_count', ps.stem_count,
                'price', ps.price
            )
        ) FILTER (WHERE ps.id IS NOT NULL), '[]'
    ) AS stems
FROM products p
LEFT JOIN categories c ON p.category_id = c.id
LEFT JOIN product_stems ps ON ps.product_id = p.id
WHERE 
    p.deleted_at IS NULL
    AND (
        COALESCE($1, '') = '' 
        OR LOWER(p.name) LIKE $1
        OR LOWER(p.description) LIKE $1
    )
    AND (
        $2::float IS NULL 
        OR p.price >= $2
    )
    AND (
        $3::float IS NULL 
        OR p.price <= $3
    )
    AND (
        $4::int[] IS NULL 
        OR p.category_id = ANY($4::int[])
    )
GROUP BY p.id, c.id, c.name, c.description
ORDER BY p.created_at DESC
LIMIT $6 OFFSET $5
`

type ListProductsParams struct {
	Search      interface{}   `json:"search"`
	PriceFrom   pgtype.Float8 `json:"price_from"`
	PriceTo     pgtype.Float8 `json:"price_to"`
	CategoryIds []int32       `json:"category_ids"`
	Offset      int32         `json:"offset"`
	Limit       int32         `json:"limit"`
}

type ListProductsRow struct {
	ID                  int64              `json:"id"`
	Name                string             `json:"name"`
	Description         string             `json:"description"`
	Price               pgtype.Numeric     `json:"price"`
	CategoryID          int64              `json:"category_id"`
	ImageUrl            []string           `json:"image_url"`
	StockQuantity       int64              `json:"stock_quantity"`
	DeletedAt           pgtype.Timestamptz `json:"deleted_at"`
	CreatedAt           time.Time          `json:"created_at"`
	HasStems            bool               `json:"has_stems"`
	IsMessageCard       bool               `json:"is_message_card"`
	IsFlowers           bool               `json:"is_flowers"`
	IsAddOn             bool               `json:"is_add_on"`
	CategoryID_2        pgtype.Int8        `json:"category_id_2"`
	CategoryName        pgtype.Text        `json:"category_name"`
	CategoryDescription pgtype.Text        `json:"category_description"`
	Stems               interface{}        `json:"stems"`
}

// -- name: ListProducts :many
// SELECT p.*,
//
//	c.id AS category_id,
//	c.name AS category_name,
//	c.description AS category_description
//
// FROM products p
// LEFT JOIN categories c ON p.category_id = c.id
// WHERE
//
//	p.deleted_at IS NULL
//	AND (
//	    COALESCE(sqlc.narg('search'), '') = ''
//	    OR LOWER(p.name) LIKE sqlc.narg('search')
//	    OR LOWER(p.description) LIKE sqlc.narg('search')
//	)
//	AND (
//	    sqlc.narg('price_from')::float IS NULL
//	    OR p.price >= sqlc.narg('price_from')
//	)
//	AND (
//	    sqlc.narg('price_to')::float IS NULL
//	    OR p.price <= sqlc.narg('price_to')
//	)
//	AND (
//	    sqlc.narg('category_ids')::int[] IS NULL
//	    OR p.category_id = ANY(sqlc.narg('category_ids')::int[])
//	)
//
// ORDER BY p.created_at DESC
// LIMIT sqlc.arg('limit') OFFSET sqlc.arg('offset');
// -- name: ListCountProducts :one
// SELECT COUNT(*) AS total_products
// FROM products
// WHERE
//
//	deleted_at IS NULL
//	AND (
//	    COALESCE(sqlc.narg('search'), '') = ''
//	    OR LOWER(name) LIKE sqlc.narg('search')
//	    OR LOWER(description) LIKE sqlc.narg('search')
//	)
//	AND (
//	    sqlc.narg('price_from')::float IS NULL
//	    OR price >= sqlc.narg('price_from')
//	)
//	AND (
//	    sqlc.narg('price_to')::float IS NULL
//	    OR price <= sqlc.narg('price_to')
//	)
//	AND (
//	    sqlc.narg('category_ids')::int[] IS NULL
//	    OR category_id = ANY(sqlc.narg('category_ids')::int[])
//	);
func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]ListProductsRow, error) {
	rows, err := q.db.Query(ctx, listProducts,
		arg.Search,
		arg.PriceFrom,
		arg.PriceTo,
		arg.CategoryIds,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductsRow{}
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CategoryID,
			&i.ImageUrl,
			&i.StockQuantity,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.HasStems,
			&i.IsMessageCard,
			&i.IsFlowers,
			&i.IsAddOn,
			&i.CategoryID_2,
			&i.CategoryName,
			&i.CategoryDescription,
			&i.Stems,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const productExists = `-- name: ProductExists :one
SELECT EXISTS(SELECT 1 FROM products WHERE id = $1) AS exists
`

func (q *Queries) ProductExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, productExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const totalProducts = `-- name: TotalProducts :one
SELECT COALESCE(COUNT(*), 0) AS total_products
FROM products
WHERE deleted_at IS NULL
`

func (q *Queries) TotalProducts(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRow(ctx, totalProducts)
	var total_products interface{}
	err := row.Scan(&total_products)
	return total_products, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = coalesce($1, name),
    description = coalesce($2, description),
    price = coalesce($3, price),
    category_id = coalesce($4, category_id),
    has_stems = coalesce($5, has_stems),
    is_message_card = coalesce($6, is_message_card),
    is_flowers = coalesce($7, is_flowers),
    is_add_on = coalesce($8, is_add_on),
    image_url = coalesce($9, image_url),
    stock_quantity = coalesce($10, stock_quantity)
WHERE id = $11
RETURNING id, name, description, price, category_id, image_url, stock_quantity, deleted_at, created_at, has_stems, is_message_card, is_flowers, is_add_on
`

type UpdateProductParams struct {
	Name          pgtype.Text    `json:"name"`
	Description   pgtype.Text    `json:"description"`
	Price         pgtype.Numeric `json:"price"`
	CategoryID    pgtype.Int8    `json:"category_id"`
	HasStems      pgtype.Bool    `json:"has_stems"`
	IsMessageCard pgtype.Bool    `json:"is_message_card"`
	IsFlowers     pgtype.Bool    `json:"is_flowers"`
	IsAddOn       pgtype.Bool    `json:"is_add_on"`
	ImageUrl      []string       `json:"image_url"`
	StockQuantity pgtype.Int8    `json:"stock_quantity"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.CategoryID,
		arg.HasStems,
		arg.IsMessageCard,
		arg.IsFlowers,
		arg.IsAddOn,
		arg.ImageUrl,
		arg.StockQuantity,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CategoryID,
		&i.ImageUrl,
		&i.StockQuantity,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.HasStems,
		&i.IsMessageCard,
		&i.IsFlowers,
		&i.IsAddOn,
	)
	return i, err
}
