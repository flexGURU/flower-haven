// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: paystack.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPaystackEvent = `-- name: CreatePaystackEvent :exec
INSERT INTO paystack_events (event, data)
VALUES ($1, $2)
`

type CreatePaystackEventParams struct {
	Event string `json:"event"`
	Data  []byte `json:"data"`
}

func (q *Queries) CreatePaystackEvent(ctx context.Context, arg CreatePaystackEventParams) error {
	_, err := q.db.Exec(ctx, createPaystackEvent, arg.Event, arg.Data)
	return err
}

const createPaystackPayment = `-- name: CreatePaystackPayment :exec
INSERT INTO paystack_payments (amount, email, reference)
VALUES ($1, $2, $3)
`

type CreatePaystackPaymentParams struct {
	Amount    string `json:"amount"`
	Email     string `json:"email"`
	Reference string `json:"reference"`
}

func (q *Queries) CreatePaystackPayment(ctx context.Context, arg CreatePaystackPaymentParams) error {
	_, err := q.db.Exec(ctx, createPaystackPayment, arg.Amount, arg.Email, arg.Reference)
	return err
}

const getPaystackPaymentByReference = `-- name: GetPaystackPaymentByReference :one
SELECT id, email, amount, reference, status, created_at, updated_at FROM paystack_payments WHERE reference = $1
`

func (q *Queries) GetPaystackPaymentByReference(ctx context.Context, reference string) (PaystackPayment, error) {
	row := q.db.QueryRow(ctx, getPaystackPaymentByReference, reference)
	var i PaystackPayment
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Amount,
		&i.Reference,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCountPaystackEvents = `-- name: ListCountPaystackEvents :one
SELECT COUNT(*) AS total_paystack_events
FROM paystack_events
WHERE 
    (
        COALESCE($1::text, '') = '' 
        OR LOWER(event) LIKE $1
    )
`

func (q *Queries) ListCountPaystackEvents(ctx context.Context, event pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, listCountPaystackEvents, event)
	var total_paystack_events int64
	err := row.Scan(&total_paystack_events)
	return total_paystack_events, err
}

const listCountPaystackPayments = `-- name: ListCountPaystackPayments :one
SELECT COUNT(*) AS total_paystack_payments
FROM paystack_payments
WHERE 
    (
        COALESCE($1::text, '') = '' 
        OR LOWER(status) LIKE $1
    )
`

func (q *Queries) ListCountPaystackPayments(ctx context.Context, status pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, listCountPaystackPayments, status)
	var total_paystack_payments int64
	err := row.Scan(&total_paystack_payments)
	return total_paystack_payments, err
}

const listPaystackEvents = `-- name: ListPaystackEvents :many
SELECT id, event, data, created_at FROM paystack_events
WHERE 
    (
        COALESCE($1::text, '') = '' 
        OR LOWER(event) LIKE $1
    )
ORDER BY created_at DESC
LIMIT $3 OFFSET $2
`

type ListPaystackEventsParams struct {
	Event  pgtype.Text `json:"event"`
	Offset int32       `json:"offset"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) ListPaystackEvents(ctx context.Context, arg ListPaystackEventsParams) ([]PaystackEvent, error) {
	rows, err := q.db.Query(ctx, listPaystackEvents, arg.Event, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaystackEvent{}
	for rows.Next() {
		var i PaystackEvent
		if err := rows.Scan(
			&i.ID,
			&i.Event,
			&i.Data,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaystackPayments = `-- name: ListPaystackPayments :many
SELECT id, email, amount, reference, status, created_at, updated_at FROM paystack_payments
WHERE 
    (
        COALESCE($1::text, '') = '' 
        OR LOWER(status) LIKE $1
    )
ORDER BY created_at DESC
LIMIT $3 OFFSET $2
`

type ListPaystackPaymentsParams struct {
	Status pgtype.Text `json:"status"`
	Offset int32       `json:"offset"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) ListPaystackPayments(ctx context.Context, arg ListPaystackPaymentsParams) ([]PaystackPayment, error) {
	rows, err := q.db.Query(ctx, listPaystackPayments, arg.Status, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaystackPayment{}
	for rows.Next() {
		var i PaystackPayment
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Amount,
			&i.Reference,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaystackPaymentStatus = `-- name: UpdatePaystackPaymentStatus :exec
UPDATE paystack_payments
SET status = $2, updated_at = now()
WHERE reference = $1
`

type UpdatePaystackPaymentStatusParams struct {
	Reference string `json:"reference"`
	Status    string `json:"status"`
}

func (q *Queries) UpdatePaystackPaymentStatus(ctx context.Context, arg UpdatePaystackPaymentStatusParams) error {
	_, err := q.db.Exec(ctx, updatePaystackPaymentStatus, arg.Reference, arg.Status)
	return err
}
