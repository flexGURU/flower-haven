// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: helpers.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const listAddOns = `-- name: ListAddOns :many
SELECT 
    p.id, p.name, p.description, p.price, p.category_id, p.image_url, p.stock_quantity, p.deleted_at, p.created_at, p.has_stems, p.is_message_card, p.is_flowers, p.is_add_on,
    c.id AS category_id,
    c.name AS category_name, 
    c.description AS category_description,
    COALESCE(
        json_agg(
            jsonb_build_object(
                'id', ps.id,
                'product_id', ps.product_id,
                'stem_count', ps.stem_count,
                'price', ps.price
            )
        ) FILTER (WHERE ps.id IS NOT NULL), '[]'
    ) AS stems
FROM products p
LEFT JOIN categories c ON p.category_id = c.id
LEFT JOIN product_stems ps ON ps.product_id = p.id
WHERE p.deleted_at IS NULL AND p.is_add_on = TRUE
GROUP BY p.id, c.id, c.name, c.description
ORDER BY p.created_at DESC
`

type ListAddOnsRow struct {
	ID                  int64              `json:"id"`
	Name                string             `json:"name"`
	Description         string             `json:"description"`
	Price               pgtype.Numeric     `json:"price"`
	CategoryID          int64              `json:"category_id"`
	ImageUrl            []string           `json:"image_url"`
	StockQuantity       int64              `json:"stock_quantity"`
	DeletedAt           pgtype.Timestamptz `json:"deleted_at"`
	CreatedAt           time.Time          `json:"created_at"`
	HasStems            bool               `json:"has_stems"`
	IsMessageCard       bool               `json:"is_message_card"`
	IsFlowers           bool               `json:"is_flowers"`
	IsAddOn             bool               `json:"is_add_on"`
	CategoryID_2        pgtype.Int8        `json:"category_id_2"`
	CategoryName        pgtype.Text        `json:"category_name"`
	CategoryDescription pgtype.Text        `json:"category_description"`
	Stems               interface{}        `json:"stems"`
}

func (q *Queries) ListAddOns(ctx context.Context) ([]ListAddOnsRow, error) {
	rows, err := q.db.Query(ctx, listAddOns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAddOnsRow{}
	for rows.Next() {
		var i ListAddOnsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CategoryID,
			&i.ImageUrl,
			&i.StockQuantity,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.HasStems,
			&i.IsMessageCard,
			&i.IsFlowers,
			&i.IsAddOn,
			&i.CategoryID_2,
			&i.CategoryName,
			&i.CategoryDescription,
			&i.Stems,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMessageCards = `-- name: ListMessageCards :many
SELECT 
    p.id, p.name, p.description, p.price, p.category_id, p.image_url, p.stock_quantity, p.deleted_at, p.created_at, p.has_stems, p.is_message_card, p.is_flowers, p.is_add_on,
    c.id AS category_id,
    c.name AS category_name, 
    c.description AS category_description,
    COALESCE(
        json_agg(
            jsonb_build_object(
                'id', ps.id,
                'product_id', ps.product_id,
                'stem_count', ps.stem_count,
                'price', ps.price
            )
        ) FILTER (WHERE ps.id IS NOT NULL), '[]'
    ) AS stems
FROM products p
LEFT JOIN categories c ON p.category_id = c.id
LEFT JOIN product_stems ps ON ps.product_id = p.id
WHERE p.deleted_at IS NULL AND p.is_message_card = TRUE
GROUP BY p.id, c.id, c.name, c.description
ORDER BY p.created_at DESC
`

type ListMessageCardsRow struct {
	ID                  int64              `json:"id"`
	Name                string             `json:"name"`
	Description         string             `json:"description"`
	Price               pgtype.Numeric     `json:"price"`
	CategoryID          int64              `json:"category_id"`
	ImageUrl            []string           `json:"image_url"`
	StockQuantity       int64              `json:"stock_quantity"`
	DeletedAt           pgtype.Timestamptz `json:"deleted_at"`
	CreatedAt           time.Time          `json:"created_at"`
	HasStems            bool               `json:"has_stems"`
	IsMessageCard       bool               `json:"is_message_card"`
	IsFlowers           bool               `json:"is_flowers"`
	IsAddOn             bool               `json:"is_add_on"`
	CategoryID_2        pgtype.Int8        `json:"category_id_2"`
	CategoryName        pgtype.Text        `json:"category_name"`
	CategoryDescription pgtype.Text        `json:"category_description"`
	Stems               interface{}        `json:"stems"`
}

func (q *Queries) ListMessageCards(ctx context.Context) ([]ListMessageCardsRow, error) {
	rows, err := q.db.Query(ctx, listMessageCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMessageCardsRow{}
	for rows.Next() {
		var i ListMessageCardsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CategoryID,
			&i.ImageUrl,
			&i.StockQuantity,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.HasStems,
			&i.IsMessageCard,
			&i.IsFlowers,
			&i.IsAddOn,
			&i.CategoryID_2,
			&i.CategoryName,
			&i.CategoryDescription,
			&i.Stems,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
